// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  // Standard Linux bindings
  {
    "bindings": {
      "shift-tab": "menu::SelectPrevious",
      "home": "menu::SelectFirst",
      "pageup": "menu::SelectFirst",
      "shift-pageup": "menu::SelectFirst",
      "ctrl-p": "menu::SelectPrevious",
      "tab": "menu::SelectNext",
      "end": "menu::SelectLast",
      "pagedown": "menu::SelectLast",
      "shift-pagedown": "menu::SelectFirst",
      "ctrl-n": "menu::SelectNext",
      "enter": "menu::Confirm",
      "ctrl-enter": "menu::SecondaryConfirm",
      "escape": "menu::Cancel",
      "ctrl-escape": "menu::Cancel",
      "ctrl-c": "menu::Cancel",
      "alt-enter": [
        "picker::ConfirmInput",
        {
          "secondary": false
        }
      ],
      "ctrl-alt-enter": [
        "picker::ConfirmInput",
        {
          "secondary": true
        }
      ],
      "ctrl-shift-w": "workspace::CloseWindow",
      "shift-escape": "workspace::ToggleZoom",
      "ctrl-o": "workspace::Open",
      "ctrl-=": "zed::IncreaseBufferFontSize",
      "ctrl-+": "zed::IncreaseBufferFontSize",
      "ctrl--": "zed::DecreaseBufferFontSize",
      "ctrl-0": "zed::ResetBufferFontSize",
      "ctrl-,": "zed::OpenSettings",
      "ctrl-q": "zed::Quit",
      "f11": "zed::ToggleFullScreen"
    }
  },
  {
    "context": "Picker || menu",
    "bindings": {
      "up": "menu::SelectPrevious",
      "down": "menu::SelectNext"
    }
  },
  {
    "context": "Prompt",
    "bindings": {
      "left": "menu::SelectPrevious",
      "right": "menu::SelectNext"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "ctrl-shift-up": "editor::MoveLineUp",
      "ctrl-shift-down": "editor::MoveLineDown",
      "escape": "editor::Cancel",
      "backspace": "editor::Backspace",
      "shift-backspace": "editor::Backspace",
      "delete": "editor::Delete",
      "tab": "editor::Tab",
      "shift-tab": "editor::Backtab",
      "ctrl-k": "editor::CutToEndOfLine",
      // "ctrl-t": "editor::Transpose",
      "ctrl-k ctrl-q": "editor::Rewrap",
      "ctrl-k q": "editor::Rewrap",
      "ctrl-backspace": "editor::DeleteToPreviousWordStart",
      "ctrl-delete": "editor::DeleteToNextWordEnd",
      "shift-delete": "editor::Cut",
      "ctrl-insert": "editor::Copy",
      "shift-insert": "editor::Paste",
      "ctrl-y": "editor::Redo",
      "ctrl-z": "editor::Undo",
      "ctrl-shift-z": "editor::Redo",
      "up": "editor::MoveUp",
      "ctrl-up": "editor::LineUp",
      "ctrl-down": "editor::LineDown",
      "pageup": "editor::MovePageUp",
      "alt-pageup": "editor::PageUp",
      "shift-pageup": "editor::SelectPageUp",
      "home": "editor::MoveToBeginningOfLine",
      "down": "editor::MoveDown",
      "pagedown": "editor::MovePageDown",
      "alt-pagedown": "editor::PageDown",
      "shift-pagedown": "editor::SelectPageDown",
      "end": "editor::MoveToEndOfLine",
      "left": "editor::MoveLeft",
      "right": "editor::MoveRight",
      "ctrl-left": "editor::MoveToPreviousWordStart",
      "ctrl-right": "editor::MoveToNextWordEnd",
      "ctrl-home": "editor::MoveToBeginning",
      "ctrl-end": "editor::MoveToEnd",
      "shift-up": "editor::SelectUp",
      "shift-down": "editor::SelectDown",
      "shift-left": "editor::SelectLeft",
      "shift-right": "editor::SelectRight",
      "ctrl-shift-left": "editor::SelectToPreviousWordStart", // cursorWordLeftSelect
      "ctrl-shift-right": "editor::SelectToNextWordEnd", // cursorWordRightSelect
      "ctrl-shift-home": "editor::SelectToBeginning",
      "ctrl-shift-end": "editor::SelectToEnd",
      "ctrl-a": "editor::SelectAll",
      "ctrl-l": "editor::SelectLine",
      "ctrl-shift-i": "editor::Format",
      // "cmd-shift-left": ["editor::SelectToBeginningOfLine", {"stop_at_soft_wraps": true }],
      "shift-home": [
        "editor::SelectToBeginningOfLine",
        {
          "stop_at_soft_wraps": true
        }
      ],
      // "ctrl-shift-a": ["editor::SelectToBeginningOfLine", { "stop_at_soft_wraps": true }],
      // "cmd-shift-right": ["editor::SelectToEndOfLine", { "stop_at_soft_wraps": true }],
      "shift-end": [
        "editor::SelectToEndOfLine",
        {
          "stop_at_soft_wraps": true
        }
      ],
      // "ctrl-shift-e": ["editor::SelectToEndOfLine", { "stop_at_soft_wraps": true }],
      // "alt-v": ["editor::MovePageUp", { "center_cursor": true }],
      "ctrl-alt-space": "editor::ShowCharacterPalette",
      "ctrl-;": "editor::ToggleLineNumbers",
      "ctrl-k ctrl-r": "editor::RevertSelectedHunks",
      "ctrl-'": "editor::ToggleHunkDiff",
      "ctrl-\"": "editor::ExpandAllHunkDiffs",
      "ctrl-i": "editor::ShowSignatureHelp",
      "alt-g b": "editor::ToggleGitBlame",
      "ctrl-/": [
        "editor::ToggleComments",
        {
          "advance_downwards": false
        }
      ]
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "ctrl-x": "editor::Cut",
      "ctrl-c": "editor::Copy",
      "ctrl-v": "editor::Paste"
    }
  },
  {
    "context": "Editor && mode == full",
    "bindings": {
      "enter": "editor::Newline",
      "shift-enter": "editor::Newline",
      "ctrl-enter": "editor::NewlineAbove",
      "ctrl-shift-enter": "editor::NewlineBelow",
      "ctrl-k ctrl-z": "editor::ToggleSoftWrap",
      "ctrl-k z": "editor::ToggleSoftWrap",
      "ctrl-f": "buffer_search::Deploy",
      "ctrl-h": [
        "buffer_search::Deploy",
        {
          "replace_enabled": true
        }
      ],
      // "cmd-e": ["buffer_search::Deploy", { "focus": false }],
      "ctrl->": "assistant::QuoteSelection",
      "ctrl-<": "assistant::InsertIntoEditor",
      "ctrl-alt-e": "editor::SelectEnclosingSymbol"
    }
  },
  {
    "context": "Editor && mode == full && edit_prediction",
    "bindings": {
      "alt-]": "editor::NextEditPrediction",
      "alt-[": "editor::PreviousEditPrediction",
      "alt-right": "editor::AcceptPartialEditPrediction"
    }
  },
  {
    "context": "Editor && !edit_prediction",
    "bindings": {
      "alt-\\": "editor::ShowEditPrediction"
    }
  },
  {
    "context": "Editor && mode == auto_height",
    "bindings": {
      "ctrl-enter": "editor::Newline",
      "shift-enter": "editor::Newline",
      "ctrl-shift-enter": "editor::NewlineBelow"
    }
  },
  {
    "context": "Markdown",
    "bindings": {
      "ctrl-c": "markdown::Copy"
    }
  },
  {
    "context": "AssistantPanel",
    "bindings": {
      "ctrl-k c": "assistant::CopyCode",
      "ctrl-g": "search::SelectNextMatch",
      "ctrl-shift-g": "search::SelectPreviousMatch",
      "ctrl-shift-m": "assistant::ToggleModelSelector",
      "ctrl-k l": "assistant::DeployPromptLibrary"
    }
  },
  {
    "context": "BufferSearchBar",
    "bindings": {
      "escape": "buffer_search::Dismiss",
      "tab": "buffer_search::FocusEditor",
      "enter": "search::SelectNextMatch",
      "shift-enter": "search::SelectPreviousMatch",
      "alt-enter": "search::SelectAllMatches",
      "ctrl-f": "search::FocusSearch",
      "ctrl-h": "search::ToggleReplace",
      "ctrl-l": "search::ToggleSelection"
    }
  },
  {
    "context": "BufferSearchBar && in_replace > Editor",
    "bindings": {
      "enter": "search::ReplaceNext",
      "ctrl-enter": "search::ReplaceAll"
    }
  },
  {
    "context": "BufferSearchBar && !in_replace > Editor",
    "bindings": {
      "up": "search::PreviousHistoryQuery",
      "down": "search::NextHistoryQuery"
    }
  },
  {
    "context": "ProjectSearchBar",
    "bindings": {
      "escape": "project_search::ToggleFocus",
      "ctrl-shift-f": "search::FocusSearch",
      "ctrl-shift-h": "search::ToggleReplace",
      "alt-ctrl-g": "search::ToggleRegex",
      "alt-ctrl-x": "search::ToggleRegex"
    }
  },
  {
    "context": "ProjectSearchBar > Editor",
    "bindings": {
      "up": "search::PreviousHistoryQuery",
      "down": "search::NextHistoryQuery"
    }
  },
  {
    "context": "ProjectSearchBar && in_replace > Editor",
    "bindings": {
      "enter": "search::ReplaceNext",
      "ctrl-alt-enter": "search::ReplaceAll"
    }
  },
  {
    "context": "ProjectSearchView",
    "bindings": {
      "escape": "project_search::ToggleFocus",
      "ctrl-shift-h": "search::ToggleReplace",
      "alt-ctrl-g": "search::ToggleRegex",
      "alt-ctrl-x": "search::ToggleRegex"
    }
  },
  {
    "context": "Pane",
    "bindings": {
      "alt-shift-left": "pane::ActivatePreviousItem",
      "alt-shift-right": "pane::ActivateNextItem",
      "ctrl-shift-pageup": "pane::SwapItemLeft",
      "ctrl-shift-pagedown": "pane::SwapItemRight",
      "ctrl-w": "pane::CloseActiveItem",
      "ctrl-f4": "pane::CloseActiveItem",
      "alt-ctrl-t": [
        "pane::CloseInactiveItems",
        {
          "close_pinned": false
        }
      ],
      "alt-ctrl-shift-w": "workspace::CloseInactiveTabsAndPanes",
      "ctrl-k u": [
        "pane::CloseCleanItems",
        {
          "close_pinned": false
        }
      ],
      "ctrl-k w": [
        "pane::CloseAllItems",
        {
          "close_pinned": false
        }
      ],
      "ctrl-shift-f": "project_search::ToggleFocus",
      "ctrl-alt-shift-right": "search::SelectNextMatch",
      "ctrl-alt-shift-left": "search::SelectPreviousMatch",
      "ctrl-alt-shift-h": "search::ToggleReplace",
      "ctrl-alt-shift-l": "search::ToggleSelection",
      "alt-enter": "search::SelectAllMatches",
      "alt-c": "search::ToggleCaseSensitive",
      "alt-w": "search::ToggleWholeWord",
      "alt-r": "search::ToggleRegex",
      "alt-ctrl-f": "project_search::ToggleFilters",
      "ctrl-alt-shift-r": "search::ToggleRegex",
      "ctrl-alt-shift-x": "search::ToggleRegex",
      "ctrl-k shift-enter": "pane::TogglePinTab"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      // Change the default action on `menu::Confirm` by setting the parameter
      // "alt-ctrl-o": ["projects::OpenRecent", { "create_new_window": true }],
      "alt-ctrl-o": "projects::OpenRecent",
      "alt-ctrl-shift-b": "branches::OpenRecent",
      "ctrl-~": "workspace::NewTerminal",
      "ctrl-s": "workspace::Save",
      "ctrl-k s": "workspace::SaveWithoutFormat",
      "ctrl-shift-s": "workspace::SaveAs",
      "ctrl-n": "workspace::NewFile",
      "ctrl-shift-n": "workspace::NewWindow",
      "ctrl-`": "terminal_panel::ToggleFocus",
      "ctrl-alt-b": "workspace::ToggleRightDock",
      "ctrl-b": "workspace::ToggleLeftDock",
      "ctrl-j": "workspace::ToggleBottomDock",
      "ctrl-alt-y": "workspace::CloseAllDocks",
      "ctrl-shift-f": "pane::DeploySearch",
      "ctrl-shift-h": [
        "pane::DeploySearch",
        {
          "replace_enabled": true
        }
      ],
      "ctrl-k ctrl-s": "zed::OpenKeymap",
      "ctrl-k ctrl-t": "theme_selector::Toggle",
      "ctrl-t": "project_symbols::Toggle",
      "ctrl-p": "file_finder::Toggle",
      "ctrl-tab": "tab_switcher::Toggle",
      "ctrl-shift-tab": [
        "tab_switcher::Toggle",
        {
          "select_last": true
        }
      ],
      "ctrl-e": "file_finder::Toggle",
      "ctrl-shift-p": "command_palette::Toggle",
      "f1": "command_palette::Toggle",
      "ctrl-shift-m": "diagnostics::Deploy",
      "ctrl-shift-e": "project_panel::ToggleFocus",
      "ctrl-shift-b": "outline_panel::ToggleFocus",
      "ctrl-?": "assistant::ToggleFocus",
      "ctrl-alt-s": "workspace::SaveAll",
      "ctrl-k m": "language_selector::Toggle",
      "escape": "workspace::Unfollow",
      "alt-left": "workspace::ActivatePaneLeft",
      "alt-right": "workspace::ActivatePaneRight",
      "alt-up": "workspace::ActivatePaneUp",
      "alt-down": "workspace::ActivatePaneDown",
      "alt-ctrl-down": "pane::SplitDown",
      "alt-ctrl-up": "pane::SplitUp",
      "alt-ctrl-left": "pane::SplitLeft",
      "alt-ctrl-right": "pane::SplitRight"
    }
  },
  // Bindings that should be unified with bindings for more general actions
  {
    "context": "Editor && renaming",
    "bindings": {
      "enter": "editor::ConfirmRename"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "enter": "editor::ConfirmCompletion",
      "tab": "editor::ComposeCompletion"
    }
  },
  {
    "context": "Editor && edit_prediction && !showing_completions",
    "bindings": {
      "tab": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && showing_code_actions",
    "bindings": {
      "enter": "editor::ConfirmCodeAction"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "up": "editor::ContextMenuPrevious",
      "ctrl-p": "editor::ContextMenuPrevious",
      "down": "editor::ContextMenuNext",
      "ctrl-n": "editor::ContextMenuNext",
      "pageup": "editor::ContextMenuFirst",
      "pagedown": "editor::ContextMenuLast"
    }
  },
  // Custom bindings
  {
    "bindings": {
      "ctrl-alt-shift-f": "workspace::FollowNextCollaborator",
      "ctrl-alt-i": "zed::DebugElements",
      "ctrl-:": "editor::ToggleInlayHints"
    }
  },
  {
    "context": "!Terminal",
    "bindings": {
      "ctrl-shift-c": "collab_panel::ToggleFocus"
    }
  },
  {
    "context": "Editor && mode == full",
    "bindings": {
      "alt-enter": "editor::OpenExcerpts",
      "shift-enter": "editor::ExpandExcerpts",
      "ctrl-k enter": "editor::OpenExcerptsSplit",
      "ctrl-enter": "assistant::InlineAssist"
    }
  },
  {
    "context": "ProposedChangesEditor",
    "bindings": {
      "ctrl-shift-y": "editor::ApplyDiffHunk",
      "ctrl-alt-a": "editor::ApplyAllDiffHunks"
    }
  },
  {
    "context": "Editor && jupyter && !ContextEditor",
    "bindings": {
      "ctrl-shift-enter": "repl::Run",
      "ctrl-alt-enter": "repl::RunInPlace"
    }
  },
  {
    "context": "ContextEditor > Editor",
    "bindings": {
      "ctrl-enter": "assistant::Assist",
      "ctrl-s": "workspace::Save",
      "ctrl->": "assistant::QuoteSelection",
      "ctrl-<": "assistant::InsertIntoEditor",
      "shift-enter": "assistant::Split",
      "ctrl-r": "assistant::CycleMessageRole",
      "enter": "assistant::ConfirmCommand",
      "alt-enter": "editor::Newline"
    }
  },
  {
    "context": "ProjectSearchBar && !in_replace",
    "bindings": {
      "ctrl-enter": "project_search::SearchInNew"
    }
  },
  {
    "context": "OutlinePanel && not_editing",
    "bindings": {
      "escape": "menu::Cancel",
      "left": "outline_panel::CollapseSelectedEntry",
      "right": "outline_panel::ExpandSelectedEntry",
      "ctrl-alt-c": "outline_panel::CopyPath",
      "alt-ctrl-shift-c": "outline_panel::CopyRelativePath",
      "alt-ctrl-r": "outline_panel::RevealInFileManager",
      "space": "outline_panel::OpenSelectedEntry",
      "shift-down": "menu::SelectNext",
      "shift-up": "menu::SelectPrevious",
      "alt-enter": "editor::OpenExcerpts",
      "ctrl-k enter": "editor::OpenExcerptsSplit"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {
      "left": "project_panel::CollapseSelectedEntry",
      "right": "project_panel::ExpandSelectedEntry",
      "ctrl-n": "project_panel::NewFile",
      "alt-ctrl-n": "project_panel::NewDirectory",
      "ctrl-insert": "project_panel::Copy",
      "shift-insert": "project_panel::Paste",
      "ctrl-alt-c": "project_panel::CopyPath",
      "alt-ctrl-shift-c": "project_panel::CopyRelativePath",
      "enter": "project_panel::Rename",
      "backspace": [
        "project_panel::Trash",
        {
          "skip_prompt": false
        }
      ],
      "shift-delete": [
        "project_panel::Delete",
        {
          "skip_prompt": false
        }
      ],
      "ctrl-backspace": [
        "project_panel::Delete",
        {
          "skip_prompt": false
        }
      ],
      "ctrl-delete": [
        "project_panel::Delete",
        {
          "skip_prompt": false
        }
      ],
      "alt-ctrl-r": "project_panel::RevealInFileManager",
      "ctrl-shift-enter": "project_panel::OpenWithSystem",
      "ctrl-shift-f": "project_panel::NewSearchInDirectory",
      "shift-down": "menu::SelectNext",
      "shift-up": "menu::SelectPrevious",
      "escape": "menu::Cancel"
    }
  },
  {
    // Separate block with same context so these display in context menus
    "context": "ProjectPanel",
    "bindings": {
      "f2": "project_panel::Rename",
      "ctrl-c": "project_panel::Copy",
      "ctrl-x": "project_panel::Cut",
      "ctrl-v": "project_panel::Paste",
      "delete": [
        "project_panel::Trash",
        {
          "skip_prompt": false
        }
      ]
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "space": "project_panel::Open"
    }
  },
  {
    "context": "CollabPanel && not_editing",
    "bindings": {
      "ctrl-backspace": "collab_panel::Remove",
      "space": "menu::Confirm"
    }
  },
  {
    "context": "(CollabPanel && editing) > Editor",
    "bindings": {
      "space": "collab_panel::InsertSpace"
    }
  },
  {
    "context": "ChannelModal",
    "bindings": {
      "tab": "channel_modal::ToggleMode"
    }
  },
  {
    "context": "Picker > Editor",
    "bindings": {
      "tab": "picker::ConfirmCompletion",
      "alt-enter": [
        "picker::ConfirmInput",
        {
          "secondary": false
        }
      ]
    }
  },
  {
    "context": "ChannelModal > Picker > Editor",
    "bindings": {
      "tab": "channel_modal::ToggleMode"
    }
  },
  {
    "context": "TabSwitcher",
    "bindings": {
      "ctrl-up": "menu::SelectPrevious",
      "ctrl-down": "menu::SelectNext",
      "ctrl-shift-tab": "menu::SelectPrevious",
      "ctrl-backspace": "tab_switcher::CloseSelectedItem"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-alt-space": "terminal::ShowCharacterPalette",
      "ctrl-c": "terminal::Copy",
      "ctrl-v": "terminal::Paste",
      "ctrl-enter": "assistant::InlineAssist",
      // Overrides for conflicting keybindings
      "ctrl-w": [
        "terminal::SendKeystroke",
        "ctrl-w"
      ],
      "ctrl-shift-a": "editor::SelectAll",
      "ctrl-shift-f": "buffer_search::Deploy",
      "ctrl-shift-l": "terminal::Clear",
      "ctrl-shift-w": "pane::CloseActiveItem",
      "ctrl-e": [
        "terminal::SendKeystroke",
        "ctrl-e"
      ],
      "up": [
        "terminal::SendKeystroke",
        "up"
      ],
      "pageup": [
        "terminal::SendKeystroke",
        "pageup"
      ],
      "down": [
        "terminal::SendKeystroke",
        "down"
      ],
      "pagedown": [
        "terminal::SendKeystroke",
        "pagedown"
      ],
      "escape": [
        "terminal::SendKeystroke",
        "escape"
      ],
      "enter": [
        "terminal::SendKeystroke",
        "enter"
      ],
      "ctrl-alt-c": [
        "terminal::SendKeystroke",
        "ctrl-c"
      ],
      "shift-pageup": "terminal::ScrollPageUp",
      "shift-pagedown": "terminal::ScrollPageDown",
      "shift-up": "terminal::ScrollLineUp",
      "shift-down": "terminal::ScrollLineDown",
      "shift-home": "terminal::ScrollToTop",
      "shift-end": "terminal::ScrollToBottom",
      "ctrl-shift-space": "terminal::ToggleViMode"
    }
  }
]
